%% Channel Decoder
% ChCode: a structure contains information about CMS generated by
% 'GenerateCode.m' and frame length, etc.
% info bits
function [ qam_data, encoded_bits] = Encoder( ChCode, info_bits)
% CC Encoding
% info_bits: column vector
bps = ChCode.bps;
Nb = ChCode.Nb;
Non = ChCode.Non;
Ncbpsym = ChCode.Ncbpsym;
constellation =  ChCode.Constellation;

% zero padding
pad_bits  = randi([0 1],ChCode.Nr_padbits,1);  % the type of pad_bits does not matter here
if ChCode.Alg == 0 %CC encoder
    codeword_o   = ConvEncode(info_bits',ChCode.g,ChCode.nsc_flag);
elseif ChCode.Alg == 1 % turbo encoder
    g1 = ChCode.Turbo_g; %13 15
    g2 = g1;
    nsc_flag1 = ChCode.Turbo_nsc_flag ;
    nsc_flag2 = nsc_flag1;
    pun_pattern = ChCode.Turbo_pun_pattern; % rate 1/2;
    tail_pattern = ChCode.Turbo_tail_pattern;
    interleaver = ChCode.Turbo_interleaver;
    codeword_o = TurboEncode( info_bits', interleaver, pun_pattern, tail_pattern, g1, nsc_flag1, g2, nsc_flag2 );
end
codeword_pad = ConvEncode(pad_bits',ChCode.g,ChCode.nsc_flag); % padding bit are just encoded with covolutional code
% Puncture
encoded_bits = [codeword_o'; codeword_pad'];
encoded_bits = encoded_bits(ChCode.punc_flg == 1);

% Interleaving
encoded_mtx = reshape(encoded_bits,Ncbpsym,Nb);
encoded_mtx = encoded_mtx(ChCode.interleaver1,:);
encoded_bits = encoded_mtx(:);
% QAM Modulating
data_symb_idx = bi2de(reshape(encoded_bits,bps,length(encoded_bits)/bps)','left-msb') + 1;
data_symb_idx = reshape(data_symb_idx,Non, Nb);
qam_data      = constellation(data_symb_idx);
end